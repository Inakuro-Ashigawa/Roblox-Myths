import lime.ui.FileDialog;
import lime.ui.FileDialogType;
import openfl.ui.Mouse;
import openfl.Lib;

import flxanimate.FlxAnimate;

import sys.io.File;
import haxe.io.Path;
import haxe.ds.StringMap;
import haxe.xml.Printer;
import StringTools;
import Xml;
import Sys;

import flixel.group.FlxTypedSpriteGroup;
import flixel.group.FlxTypedGroup;
import flixel.FlxCamera;

import funkin.backend.assets.ModsFolder;
import funkin.editors.EditorTreeMenu;
import funkin.editors.ui.UIText;
import funkin.editors.ui.UIState;
import funkin.editors.ui.UITopMenu;
import funkin.editors.ui.UIButton;
import funkin.editors.ui.UIButtonList;
import funkin.editors.ui.UISubstateWindow;
import funkin.game.Stage;

var brightenShader = new FunkinShader("
#pragma header

uniform float offset = 0.0;

void main() {
	gl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);
	gl_FragColor.rgb += offset * gl_FragColor.a;
}
");
brightenShader.data.offset.value = [0.0];

var editingSprite = null;
var stageGroup = new FlxTypedGroup();
var xml:Xml;

var uiCamera = new FlxCamera();
uiCamera.bgColor = 0;

var sprList:UIButtonList;
var addBoxSpr:UIButton;
var addBoxIco:FlxSprite;
var addCharSpr:UIButton;
var addCharIco:FlxSprite;
var spriteMap:StringMap = new StringMap();
var charMap:StringMap = new StringMap();
var charViewList = [];

var topMenu;

function updateCharView() {
	charViewList.splice(0, charViewList.length);
	charViewList.push({
		label: "View from Start",
		onSelect: function(_) {
			var zoom = (xml.exists("zoom")) ? Std.parseFloat(xml.get("zoom")) : 1.05;
			FlxTween.tween(FlxG.camera.scroll, {
				x: xml.exists("startCamPosX") ? xml.get("startCamPosX") : 0,
				y: xml.exists("startCamPosY") ? xml.get("startCamPosY") : 0
			}, 0.5, {ease: FlxEase.quadOut});
			FlxTween.tween(FlxG.camera, {zoom: zoom}, 0.5, {ease: FlxEase.quadOut});
		}
	});
	for (char in charMap.keys()) {
		if (char == "Combo Group") continue;

		charViewList.push({
			label: "View from " + char,
			onSelect: function(_) {
				var spr = charMap[char].sprite;
				var pos = spr.getCameraPosition();
				var xMult = 1 - 2 * spr.isPlayer;
				pos.x += Std.parseFloat(charMap[char].node.exists("camxoffset") ? charMap[char].node.get("camxoffset") : "0") * xMult;
				pos.y += Std.parseFloat(charMap[char].node.exists("camyoffset") ? charMap[char].node.get("camyoffset") : "0");
				var zoom = (xml.exists("zoom")) ? Std.parseFloat(xml.get("zoom")) : 1.05;
				FlxTween.tween(FlxG.camera.scroll, {x: pos.x - FlxG.width * 0.5, y: pos.y - FlxG.height * 0.5}, 0.5, {ease: FlxEase.quadOut});
				FlxTween.tween(FlxG.camera, {zoom: zoom}, 0.5, {ease: FlxEase.quadOut});
				pos.put();
			}
		});
	}
}

function create() {
	FlxG.mouse.visible = true;

	topMenu = [
		{
			label: "File",
			childs: [
				{
					label: "New",
					onSelect: function() {
						openSubState(new UISubstateWindow(true, "stageEditor/selector/NewStage"));
					},
				},
				null,
				{
					label: "Save",
					keybind: [17, 83],
					onSelect: function() {
						while (xml.children.length > 0)
							xml.removeChild(xml.children[0]);

						for (button in sprList.buttons.members) {
							var sprName = button.field.text;
							var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];
							xml.addChild(spr.node);
						}

						var stagePath = StringTools.replace(Assets.getPath(Paths.xml('stages/' + StageEditor_stage)), "//", "/"); //String Tools bc saving in assets folder gives "./assets//"
						File.saveContent(stagePath, '<!DOCTYPE codename-engine-stage>\n' + Printer.print(xml, true));
					}
				},
				{
					label: "Save As...",
					keybind: [17, 16, 83],
					onSelect: function() {
						var fDial = new FileDialog();    
						fDial.onSelect.add(function(file) {
							while (xml.children.length > 0)
								xml.removeChild(xml.children[0]);
	
							for (button in sprList.buttons.members) {
								var sprName = button.field.text;
								var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];
								xml.addChild(spr.node);
							}

							StageEditor_stage = Path.withoutDirectory(Path.withoutExtension(file));
							File.saveContent(file, '<!DOCTYPE codename-engine-stage>\n' + Printer.print(xml, true));
						});
						fDial.browse(FileDialogType.SAVE, 'xml', Sys.getCwd(), 'Save A Codename Engine Stage XML.');
					},
				},
				null,
				{
					label: "Exit",
					onSelect: function() {
						var state = new EditorTreeMenu();
						state.scriptName = "stageEditor/selector/StageSelector"; // OVERRIDING NEW AIANT GON STOP ME OPTIONS.TREEMENU
						FlxG.switchState(state);
					}
				}
			]
		},
		{
			label: "Edit",
			childs: [
				{
					label: "Stage Properties",
					onSelect: function(_) {
						editingSprite = null;
						openSubState(new UISubstateWindow(true, "stageEditor/StageDataScreen"));
					}
				},
				{
					label: "New Sprite",
					onSelect: function(_) {
						editingSprite = null;
						openSubState(new UISubstateWindow(true, "stageEditor/sprites/SpriteScreen"));
					}
				},
				{
					label: "New Box",
					onSelect: function(_) {
						editingSprite = null;
						openSubState(new UISubstateWindow(true, "stageEditor/sprites/BoxScreen"));
					}
				},
				{
					label: "New Character Pos",
					onSelect: function(_) {
						editingSprite = null;
						openSubState(new UISubstateWindow(true, "stageEditor/sprites/CharPosScreen"));
					}
				}
			]
		},
		{
			label: "View",
			childs: charViewList
		}
	];

	FlxG.cameras.add(uiCamera, false);

	sprList = new UIButtonList(FlxG.width - 265, 30, 250, FlxG.height - 45, "Sprite List", FlxPoint.get(250, 54), null, 0);
	sprList.cameras = [uiCamera];
	sprList.frames = Paths.getFrames('editors/ui/inputbox');
	sprList.addButton.field.text = "Sprite";
	sprList.addButton.field.size = 13;
	sprList.addButton.field.alignment = "left";
	sprList.addButton.resize(sprList.addButton.bWidth / 3, sprList.addButton.bHeight);
	sprList.addButton.callback = function() {
		editingSprite = null;
		openSubState(new UISubstateWindow(true, "stageEditor/sprites/SpriteScreen"));
	}
	add(sprList);

	addBoxSpr = new UIButton(sprList.addButton.bWidth, 16, "Box", function() {
		editingSprite = null;
		openSubState(new UISubstateWindow(true, "stageEditor/sprites/BoxScreen"));
	}, sprList.addButton.bWidth);
	addBoxSpr.autoAlpha = false;
	addBoxSpr.color = 0xFF00FF00;
	addBoxSpr.cameras = [sprList.buttonCameras];
	addBoxSpr.field.size = 13;
	addBoxSpr.field.alignment = "left";
	sprList.members.push(addBoxSpr);

	addBoxIco = sprList.addIcon.clone();
	addBoxSpr.members.push(addBoxIco);

	addCharSpr = new UIButton(addBoxSpr.x + addBoxSpr.bWidth, 16, "Char", function() {
		editingSprite = null;
		openSubState(new UISubstateWindow(true, "stageEditor/sprites/CharPosScreen"));
	}, addBoxSpr.bWidth);
	addCharSpr.autoAlpha = false;
	addCharSpr.color = 0xFF00FF00;
	addCharSpr.cameras = [sprList.buttonCameras];
	addCharSpr.field.size = 13;
	addCharSpr.field.alignment = "left";
	sprList.members.push(addCharSpr);

	addCharIco = sprList.addIcon.clone();
	addCharSpr.members.push(addCharIco);

	loadStage();

	if (charMap["Spectator"] == null) {
		editingSprite = {
			index: -1,
			node: Xml.createElement("gf"),
			sprite: new Character(0, 0, "gf", false)
		}
		
		saveCharButton("Spectator", 400, 130, 0.95, 0xFFA5004D);
		charMap.set("Spectator", editingSprite);

		editingSprite.sprite.shader = brightenShader;
		stageGroup.insert(editingSprite.index, editingSprite.sprite);
	}

	if (charMap["Opponent"] == null) {
		editingSprite = {
			index: -1,
			node: Xml.createElement("dad"),
			sprite: new Character(0, 0, "dad", false)
		}
		
		saveCharButton("Opponent", 100, 100, 1, 0xFFAF66CE);
		charMap.set("Opponent", editingSprite);

		editingSprite.sprite.shader = brightenShader;
		stageGroup.insert(editingSprite.index, editingSprite.sprite);
	}

	if (charMap["Player"] == null) {
		editingSprite = {
			index: -1,
			node: Xml.createElement("bf"),
			sprite: new Character(0, 0, "bf", false)
		}
		
		saveCharButton("Player", 770, 100, 1, 0xFF31B0D1);
		charMap.set("Player", editingSprite);

		editingSprite.sprite.shader = brightenShader;
		stageGroup.insert(editingSprite.index, editingSprite.sprite);
	}

	if (charMap["Combo Group"] == null)
		makeComboGroup(Xml.createElement("combo"));
	updateCharView();

	var topSpr = new UITopMenu(topMenu);
	topSpr.cameras = [uiCamera];
	add(topSpr);

	add(stageGroup);

	Lib.current.stage.window.onDropFile.add(dropFile);

	// var atlas = charMap["Spectator"].sprite.animateAtlas;
	// atlas.parseElement(atlas.anim.curInstance, atlas.anim.curFrame, atlas._matrix, atlas.colorTransform, true);
	// // trace(FlxAnimate.matrixesPool._pool[FlxAnimate.matrixesPool._count]);
	// trace(FlxAnimate.matrixesPool);
}

function dropFile(file) {
	file = StringTools.replace(file, "\\", "/");
	cwd = StringTools.replace(Sys.getCwd(), "\\", "/");

	var prefix = (ModsFolder.currentModFolder == null) ? "./assets/images/" : (ModsFolder.modsPath + ModsFolder.currentModFolder+ "/images/");

	if (!StringTools.startsWith(file, cwd)) {
		var folder = xml.exists("folder") ? xml.get("folder") : "";

		var oldPath = file;
		file = cwd + prefix + folder + Path.withoutDirectory(file);
		File.copy(oldPath, file);
	}

	var sprName = Path.withoutDirectory(Path.withoutExtension(file));

	if (subState != null && subState.scriptName == "stageEditor/sprites/SpriteScreen") {
		if (subState.stateScripst.get("newSprite"))
			subState.stateScripts.get("nameTextBox").label.text = sprName;
		subState.stateScripts.get("fileTextBox").label.text = sprName;
	} else {
		if (spriteMap.exists(sprName)) {
			editingSprite = spriteMap[sprName];
			editingSprite.node.set("sprite", sprName);
			stageGroup.remove(editingSprite.sprite, true);
			editingSprite.sprite.destroy(); // much easier to remake than mess with it lol.
		} else {
			editingSprite = {
				index: -1,
				node: Xml.createElement("sprite")
			};
			editingSprite.node.set("name", sprName);
			editingSprite.node.set("sprite", sprName);
		}

		saveSprButton();
		spriteMap.set(editingSprite.node.get("name"), editingSprite);
	
		editingSprite.sprite = XMLUtil.createSpriteFromXML(editingSprite.node, xml.get("folder"));
		editingSprite.sprite.shader = brightenShader;
		stageGroup.insert(editingSprite.index, editingSprite.sprite);
	}

	Lib.current.stage.window.focus();
}

function destroy() {
	Lib.current.stage.window.onDropFile.remove(dropFile);
}

var uiPos = FlxPoint.get();
var movingSpr;
var lastMoving;
var oldPos = [0, 0];
var mousePos = [0, 0];

function overlappingPoint() {
	var point = FlxG.mouse.getScreenPosition();
	point.x += FlxG.camera.scroll.x * editingSprite.sprite.scrollFactor.x;
	point.y += FlxG.camera.scroll.y * editingSprite.sprite.scrollFactor.y;
	point._weak = true;

	if (Std.isOfType(editingSprite.sprite, FlxTypedSpriteGroup)) {
		var overlaps = (point.x >= editingSprite.sprite.findMinX() && point.x <= editingSprite.sprite.findMaxX())
					&& (point.y >= editingSprite.sprite.findMinY() && point.y <= editingSprite.sprite.findMaxY());
		point.put();
		return overlaps;
	}
	
	if (editingSprite.sprite.animateAtlas != null) {
		var overlaps = (point.x >= editingSprite.sprite.x && point.x <= editingSprite.sprite.x + editingSprite.sprite.animateAtlas.width)
					&& (point.y >= editingSprite.sprite.y && point.y <= editingSprite.sprite.y + editingSprite.sprite.animateAtlas.height);
		point.put();
		return overlaps;
	}

	point = FlxG.mouse.getScreenPosition(FlxG.camera, point);
	return editingSprite.sprite.getScreenBounds(null, FlxG.camera).containsPoint(point);
}

function update(e) {
	if (FlxG.keys.justPressed.R)
		FlxG.switchState(new UIState(true, "stageEditor/StageEdit"));

	var posMult = 1 + 4 * FlxG.keys.pressed.SHIFT;
	FlxG.camera.scroll.x += e * 250 * (1 * FlxG.keys.pressed.L - 1 * FlxG.keys.pressed.J) * posMult;
	FlxG.camera.scroll.y += e * 250 * (1 * FlxG.keys.pressed.K - 1 * FlxG.keys.pressed.I) * posMult;
	FlxG.camera.zoom += e * (1 * FlxG.keys.pressed.E - 1 * FlxG.keys.pressed.Q);
	FlxG.camera.zoom = Math.max(FlxG.camera.zoom, 0.01);

	lastMoving = sprList.curMoving;

	FlxG.mouse.getScreenPosition(uiCamera, uiPos);

	var canClick = false;
	currentCursor = "arrow";
	if (uiPos.x <= 1010 && editingSprite != null) {
		canClick = overlappingPoint();
		currentCursor = (canClick) ? "hand" : "arrow";
		if (canClick && FlxG.mouse.justPressed) {
			movingSpr = true;
			oldPos = [editingSprite.sprite.x, editingSprite.sprite.y];
			mousePos = [FlxG.mouse.screenX, FlxG.mouse.screenY];
		}
	}
	movingSpr = (movingSpr && !FlxG.mouse.justReleased);

	if (movingSpr) {
		editingSprite.sprite.setPosition(
			oldPos[0] + (FlxG.mouse.screenX - mousePos[0]),
			oldPos[1] + (FlxG.mouse.screenY - mousePos[1])
		);
		editingSprite.node.set("x", editingSprite.sprite.x);
		editingSprite.node.set("y", editingSprite.sprite.y);
	}
}

function postUpdate(e) {
	brightenShader.data.offset.value[0] = FlxMath.lerp(brightenShader.data.offset.value[0], 0, e * 3);

	if (lastMoving != null && lastMoving != sprList.curMoving) {
		for (i in 0...sprList.buttons.members.length) {
			var button = sprList.buttons.members[i];
			var sprName = button.field.text;
			var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];
			spr.index = i;

			stageGroup.remove(spr.sprite, true);
			stageGroup.add(spr.sprite);
		}
	}
	sprList.addIcon.x = sprList.addButton.x + 10;
	sprList.addButton.field.x = sprList.addButton.x + 25;
	addBoxSpr.y = sprList.addButton.y;
	addBoxIco.x = addBoxSpr.x + 10;
	addBoxIco.y = sprList.addIcon.y;
	addBoxSpr.field.x = addBoxSpr.x + 45;
	addCharSpr.y = sprList.addButton.y;
	addCharIco.x = addCharSpr.x + 10;
	addCharIco.y = sprList.addIcon.y;
	addCharSpr.field.x = addCharSpr.x + 40;

	for (item in spriteMap.iterator()) {
		var theA = item.button.colorTransform;
		theA.redOffset = theA.greenOffset = theA.blueOffset = 50 * (editingSprite == item);

		item.button.field.x = 10;
		item.deleteButton.y = item.button.y + item.button.bHeight * 0.5 - item.deleteButton.bHeight * 0.5;
		item.deleteIcon.y = item.deleteButton.y + 8;
		item.childButton.y = item.deleteButton.y;
		item.childIcon.y = item.childButton.y + 8;
		item.editButton.y = item.childButton.y;
		item.editIcon.y = item.editButton.y + 8;
	}

	for (item in charMap.iterator()) {
		var theA = item.button.colorTransform;
		theA.redOffset = theA.greenOffset = theA.blueOffset = 50 * (editingSprite == item);

		item.button.field.x = 10;
		item.switchButton.y = item.button.y + item.button.bHeight * 0.5 - item.switchButton.bHeight * 0.5;
		item.switchIcon.y = item.switchButton.y + 8;
		item.editButton.y = item.switchButton.y;
		item.editIcon.y = item.editButton.y + 8;
		if (item.deleteButton != null) {
			item.deleteButton.y = item.editButton.y;
			item.deleteIcon.y = item.deleteButton.y + 8;
		}
	}
}

function saveSprButton() {
	var sprName = editingSprite.node.get("name");

	if (editingSprite.index <= -1) {
		var daButton;
		daButton = new UIButton(0, 0, sprName, function() {
			brightenShader.data.offset.value[0] = 0.3;
			editingSprite = spriteMap[daButton.field.text];

			var selectedIndex = editingSprite.index;
			for (button in sprList.buttons.members) {
				var sprName = button.field.text;
				var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];
	
				if (spr == charMap["Combo Group"]) {
					for (thing in spr.sprite.members)
						thing.shaderEnabled = (spr.index == selectedIndex);
				} else {
					spr.sprite.shaderEnabled = (spr.index == selectedIndex);
					if (spr.sprite.animateAtlas != null)
						spr.sprite.animateAtlas.shaderEnabled = (spr.index == selectedIndex);
				}
			}
		}, 250, 54);
		daButton.autoAlpha = false;
		daButton.field.alignment = "left";
		sprList.add(daButton);

		var deleteButton = new UIButton(daButton.x + daButton.bWidth - 36, daButton.bHeight/2 - 16, "", function () {
			var sprName = daButton.field.text;
			editingSprite = (editingSprite != null && spriteMap[sprName].index == editingSprite.index) ? null : editingSprite;

			var spr = spriteMap[sprName].sprite;
			sprList.remove(daButton);
			daButton.destroy();
			spriteMap.remove(sprName);

			for (i in 0...sprList.buttons.members.length) { //fix the ordering again
				var button = sprList.buttons.members[i];
				var sprName = button.field.text;
				if (button.color == 0xFFFFFF)
					spriteMap[sprName].index = i;
				else
					charMap[sprName].index = i;
			}

			stageGroup.remove(spr, true);
			spr.destroy();
		}, 32);
		deleteButton.color = 0xFFFF0000;
		deleteButton.autoAlpha = false;
		daButton.members.push(deleteButton);

		var deleteIcon = new FlxSprite(deleteButton.x + (15/2), deleteButton.y + 8, Paths.image('editors/character/delete-button'));
		deleteIcon.antialiasing = false;
		daButton.members.push(deleteIcon);

		var childNodeButton = new UIButton(deleteButton.x - 36, deleteButton.y, "", function () {
			editingSprite = spriteMap[daButton.field.text];
			openSubState(new UISubstateWindow(true, "stageEditor/sprites/PropertyScreen"));
		}, 32);
		childNodeButton.autoAlpha = false;
		daButton.members.push(childNodeButton);

		var childNodeIcon = new FlxSprite(childNodeButton.x + (15/2), childNodeButton.y + 8, Paths.image('editors/stage/node-button'));
		childNodeIcon.antialiasing = false;
		daButton.members.push(childNodeIcon);

		var editButton = new UIButton(childNodeButton.x - 36, deleteButton.y, "", function () {
			editingSprite = spriteMap[daButton.field.text];
			openSubState(new UISubstateWindow(true, (editingSprite.node.nodeName == "box" || editingSprite.node.nodeName == "solid") ? "stageEditor/sprites/BoxScreen" : "stageEditor/sprites/SpriteScreen"));
		}, 32);
		editButton.color = 0xFFFFFF00;
		editButton.autoAlpha = false;
		daButton.members.push(editButton);

		var editIcon = new FlxSprite(editButton.x + (15/2), editButton.y + 8, Paths.image('editors/character/edit-button'));
		editIcon.antialiasing = false;
		daButton.members.push(editIcon);

		editingSprite.button = daButton;
		editingSprite.deleteButton = deleteButton;
		editingSprite.deleteIcon = deleteIcon;
		editingSprite.childButton = childNodeButton;
		editingSprite.childIcon = childNodeIcon;
		editingSprite.editButton = editButton;
		editingSprite.editIcon = editIcon;

		editingSprite.index = stageGroup.length;
	} else {
		daButton = sprList.buttons.members[editingSprite.index];
		daButton.field.text = sprName;
	}
}

function checkEmptyFrame() {
	if (editingSprite.node.nodeName == "box" || editingSprite.node.nodeName == "solid") return;
	if (editingSprite.sprite._frame != null && editingSprite.sprite.graphic.assetsKey != "flixel/images/logo/default.png") return;

	var message = 'Sprite "' + editingSprite.node.get("name") + '" was unable to properly load the graphic.\n'
				+ 'Stage Folder: "' + xml.get("folder") + '"\n'
				+ 'Sprite Image: "' + (editingSprite.node.exists("sprite") ? editingSprite.node.get("sprite") : "CANNOT FIND `sprite` ATTRIBUTE.") + '"\n'
				+ 'Attempted Path: "images/' + xml.get("folder") + editingSprite.node.get("sprite") + '.png"';
	var warningText = new UIText(10, 710, 0, message, 18, 0xFFFF2E54);
	warningText.y -= warningText.height;
	warningText.cameras = [uiCamera];
	add(warningText);

	FlxTween.tween(warningText, {y: warningText.y - 100, alpha: 0}, 2, {startDelay: 7, ease: FlxEase.quantIn});
	CoolUtil.playMenuSFX(0, 0.4);
}

function saveCharButton(name, defaultX, defaultY, defaultScroll, color) {
	function getAtt(name, defaultVal) {
		return Std.parseFloat(editingSprite.node.exists(name) ? editingSprite.node.get(name) : defaultVal);
	}

	var scroll = [editingSprite.node.get("scrollx"), editingSprite.node.get("scrolly")];
	if (editingSprite.node.exists("scroll")) {
		editingSprite.node.set("scrollx", editingSprite.node.get("scroll"));
		editingSprite.node.set("scrolly", editingSprite.node.get("scroll"));
		scroll = [editingSprite.node.get("scroll"), editingSprite.node.get("scroll")];
		editingSprite.node.remove("scroll");
	}
	if (scroll[0] == null) scroll[0] = defaultScroll;
	if (scroll[1] == null) scroll[1] = defaultScroll;

	editingSprite.sprite.setPosition(getAtt("x", defaultX), getAtt("y", defaultY));
	editingSprite.sprite.scrollFactor.set(scroll[0], scroll[1]);
	editingSprite.sprite.skew.set(getAtt("skewx", "0"), getAtt("skewy", "0"));
	if (editingSprite.sprite.xml.exists("scale"))
		editingSprite.sprite.scale.set(editingSprite.sprite.xml.get("scale"), editingSprite.sprite.xml.get("scale"));
	else
		editingSprite.sprite.scale.set(1, 1);
	editingSprite.sprite.updateHitbox();
	editingSprite.sprite.scale.x *= getAtt("scale", "1");
	editingSprite.sprite.scale.y *= getAtt("scale", "1");
	editingSprite.sprite.alpha = getAtt("alpha", "1");
	var flipPos = (editingSprite.node.exists("flip") || editingSprite.node.exists("flipX")) ? (editingSprite.node.get("flip") == "true" || editingSprite.node.get("flipX") == "true") : name == "Player";
	editingSprite.sprite.isPlayer = flipPos;
	editingSprite.sprite.flipX = (editingSprite.sprite.xml.get("flipX") == "true") != flipPos;
	editingSprite.sprite.offset.set(editingSprite.sprite.globalOffset.x * (flipPos != editingSprite.sprite.playerOffsets ? 1 : -1), -editingSprite.sprite.globalOffset.y);

	if (editingSprite.index <= -1) {
		var daButton;
		daButton = new UIButton(0, 0, name, function() {
			brightenShader.data.offset.value[0] = 0.3;
			editingSprite = charMap[daButton.field.text];
	
			var selectedIndex = editingSprite.index;
			for (button in sprList.buttons.members) {
				var sprName = button.field.text;
				var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];
	
				if (spr == charMap["Combo Group"]) {
					for (thing in spr.sprite.members)
						thing.shaderEnabled = (spr.index == selectedIndex);
				} else {
					spr.sprite.shaderEnabled = (spr.index == selectedIndex);
					if (spr.sprite.animateAtlas != null)
						spr.sprite.animateAtlas.shaderEnabled = (spr.index == selectedIndex);
				}
			}
		}, 250, 54);
		daButton.autoAlpha = false;
		daButton.frames = Paths.getFrames("editors/ui/grayscale-button");
		daButton.color = color;
		daButton.field.alignment = "left";
		sprList.add(daButton);
	
		var switchX = daButton.x + daButton.bWidth - 36;
		if (name != "Player" && name != "Opponent" && name != "Spectator") {
			var deleteButton = new UIButton(switchX, daButton.bHeight/2 - 16, "", function () {
				var sprName = daButton.field.text;
				editingSprite = (editingSprite != null && charMap[sprName].index == editingSprite.index) ? null : editingSprite;

				var spr = charMap[sprName].sprite;
				sprList.remove(daButton);
				daButton.destroy();
				charMap.remove(sprName);

				for (i in 0...sprList.buttons.members.length) { //fix the ordering again
					var button = sprList.buttons.members[i];
					var sprName = button.field.text;
					if (button.color == 0xFFFFFF)
						spriteMap[sprName].index = i;
					else
						charMap[sprName].index = i;
				}

				stageGroup.remove(spr, true);
				spr.destroy();
				updateCharView();
			}, 32);
			deleteButton.color = 0xFFFF0000;
			deleteButton.autoAlpha = false;
			daButton.members.push(deleteButton);
		
			var deleteIcon = new FlxSprite(deleteButton.x + (15/2), deleteButton.y + 8, Paths.image('editors/character/delete-button'));
			deleteIcon.antialiasing = false;
			daButton.members.push(deleteIcon);

			editingSprite.deleteButton = deleteButton;
			editingSprite.deleteIcon = deleteIcon;
			switchX = deleteButton.x - 36;
		}

		var switchButton = new UIButton(switchX, daButton.bHeight/2 - 16, "", function () {
			editingSprite = charMap[daButton.field.text];
			openSubState(new ModSubState("stageEditor/SwitchScreen"));
		}, 32);
		switchButton.autoAlpha = false;
		daButton.members.push(switchButton);
	
		var switchIcon = new FlxSprite(switchButton.x + (15/2), switchButton.y + 8, Paths.image('editors/stage/switch-button'));
		switchIcon.antialiasing = false;
		daButton.members.push(switchIcon);
	
		var editButton = new UIButton(switchButton.x - 36, switchButton.y, "", function () {
			editingSprite = charMap[daButton.field.text];
			openSubState(new UISubstateWindow(true, "stageEditor/sprites/CharPosScreen"));
		}, 32);
		editButton.color = 0xFFFFFF00;
		editButton.autoAlpha = false;
		daButton.members.push(editButton);
	
		var editIcon = new FlxSprite(editButton.x + (15/2), editButton.y + 8, Paths.image('editors/character/edit-button'));
		editIcon.antialiasing = false;
		daButton.members.push(editIcon);
	
		editingSprite.index = stageGroup.length;

		editingSprite.button = daButton;
		editingSprite.switchButton = switchButton;
		editingSprite.switchIcon = switchIcon;
		editingSprite.editButton = editButton;
		editingSprite.editIcon = editIcon;
	} else if (editingSprite.node.nodeName == "char" || editingSprite.node.nodeName == "character") {
		sprList.buttons.members[editingSprite.index].field.text = editingSprite.node.get("name");
	}
}

function makeComboGroup(node) {
	var group = new FlxTypedSpriteGroup(FlxG.width * 0.55, (FlxG.height * 0.5) - 60, 5);
	if (node.exists("x"))
		group.x = node.get("x");
	if (node.exists("y"))
		group.y = node.get("y");

	var daButton = new UIButton(0, 0, "Combo Group", function() {
		brightenShader.data.offset.value[0] = 0.3;
		editingSprite = charMap["Combo Group"];

		var selectedIndex = editingSprite.index;
		for (button in sprList.buttons.members) {
			var sprName = button.field.text;
			var spr = (button.color == 0xFFFFFF) ? spriteMap[sprName] : charMap[sprName];

			if (spr == charMap["Combo Group"]) {
				for (thing in spr.sprite.members)
					thing.shaderEnabled = (spr.index == selectedIndex);
			} else {
				spr.sprite.shaderEnabled = (spr.index == selectedIndex);
				if (spr.sprite.animateAtlas != null)
					spr.sprite.animateAtlas.shaderEnabled = (spr.index == selectedIndex);
			}
		}
	}, 250, 54);
	daButton.autoAlpha = false;
	daButton.frames = Paths.getFrames("editors/ui/grayscale-button");
	daButton.color = 0xFFFEFEFE; //254 254 254 (button looping uses colors for checking if its a sprite or not)
	daButton.field.alignment = "left";
	sprList.add(daButton);

	var switchIcon = new FlxSprite().loadGraphic(Paths.image('editors/stage/invis-button'), true, 16, 16);
	switchIcon.animation.add("true", [0]);
	switchIcon.animation.add("false", [1]);
	switchIcon.animation.play("true");
	switchIcon.antialiasing = false;

	var switchButton = new UIButton(daButton.x + daButton.bWidth - 36, daButton.bHeight/2 - 16, "", function () {
		group.visible = !group.visible;
		switchIcon.animation.play(group.visible);
	}, 32);
	switchButton.autoAlpha = false;
	daButton.members.push(switchButton);

	switchIcon.setPosition(switchButton.x + (15/2), switchButton.y + 8);
	daButton.members.push(switchIcon);

	var editButton = new UIButton(switchButton.x - 36, switchButton.y, "", function () {
		editingSprite = charMap["Combo Group"];
		openSubState(new UISubstateWindow(true, "stageEditor/sprites/ComboPosScreen"));
	}, 32);
	editButton.color = 0xFFFFFF00;
	editButton.autoAlpha = false;
	daButton.members.push(editButton);

	var editIcon = new FlxSprite(editButton.x + (15/2), editButton.y + 8, Paths.image('editors/character/edit-button'));
	editIcon.antialiasing = false;
	daButton.members.push(editIcon);

	var cmb = {
		index: stageGroup.length,
		node: node,
		sprite: group,

		button: daButton,
		switchButton: switchButton,
		switchIcon: switchIcon,
		editButton: editButton,
		editIcon: editIcon
	};
	charMap["Combo Group"] = cmb;
	stageGroup.add(group);

	var com = CoolUtil.loadAnimatedGraphic(new FlxSprite(), Paths.image('game/score/combo'));
	com.shader = brightenShader;
	com.scale.set(0.7, 0.7);
	group.add(com);

	var sick = CoolUtil.loadAnimatedGraphic(new FlxSprite(-40, -60), Paths.image('game/score/sick'));
	sick.shader = brightenShader;
	sick.scale.set(0.7, 0.7);
	group.add(sick);

	for (i in 0...3) {
		var num = CoolUtil.loadAnimatedGraphic(new FlxSprite((43 * i) - 60, 80), Paths.image('game/score/num' + (4 - i * 2)));
		num.shader = brightenShader;
		num.scale.set(0.5, 0.5);
		group.add(num);
	}

	group.frameWidth = group.members[2].x - (group.members[1].x + group.members[1].width);
	group.frameHeight = group.members[2].x - (group.members[1].x + group.members[1].width);
}

function loadStage() {
	var stagePath = Paths.xml('stages/' + StageEditor_stage);

	if (Assets.exists(stagePath))
		xml = Xml.parse(Assets.getText(stagePath)).firstElement();

	if (xml.exists("folder")) {
		var spritesParentFolder = xml.get("folder");
		if (spritesParentFolder.charAt(spritesParentFolder.length-1) != "/") spritesParentFolder = spritesParentFolder + "/";
		xml.set("folder", spritesParentFolder);
	}

	FlxG.camera.zoom = (xml.exists("zoom")) ? Std.parseFloat(xml.get("zoom")) : 1.05;

	var elems = [];
	for(node in xml.elements()) {
		if (node.nodeName == "high-memory")
			for(e in node.children)
				elems.push(e);
		else
			elems.push(node);
	}

	for (node in elems) {
		if (node.nodeType != Xml.Element) continue;

		var sprite = switch (node.nodeName) {
			case "sprite" | "spr" | "sparrow":
				editingSprite = {
					index: -1,
					node: node,
					sprite: XMLUtil.createSpriteFromXML(node, xml.get("folder"))
				}

				saveSprButton();
				spriteMap.set(node.get("name"), editingSprite);
			
				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "box" | "solid":
				function getAtt(name, defaultVal) {
					return Std.parseFloat(node.exists(name) ? node.get(name) : defaultVal);
				}
				var xmlColor = node.exists("color") ? CoolUtil.getColorFromDynamic(node.get("color")) : -1;
				editingSprite = {
					index: -1,
					node: node,
					sprite: new FlxSprite(getAtt("x", "0"), getAtt("y", "0")).makeSolid(getAtt("width", "0"), getAtt("height", "0"), xmlColor)
				}

				saveSprButton();
				spriteMap.set(node.get("name"), editingSprite);
			
				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "boyfriend" | "bf" | "player":
				editingSprite = {
					index: -1,
					node: node,
					sprite: new Character(0, 0, "bf", false)
				}
				
				saveCharButton("Player", 770, 100, 1, 0xFF31B0D1);
				charMap.set("Player", editingSprite);

				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "girlfriend" | "gf":
				editingSprite = {
					index: -1,
					node: node,
					sprite: new Character(0, 0, "gf", false)
				}
				
				saveCharButton("Spectator", 400, 130, 0.95, 0xFFA5004D);
				charMap.set("Spectator", editingSprite);

				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "dad" | "opponent":
				editingSprite = {
					index: -1,
					node: node,
					sprite: new Character(0, 0, "dad", false)
				}
				
				saveCharButton("Opponent", 100, 100, 1, 0xFFAF66CE);
				charMap.set("Opponent", editingSprite);

				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "character" | "char":
				editingSprite = {
					index: -1,
					node: node,
					sprite: new Character(0, 0, "bf", false)
				}
				
				saveCharButton(node.get("name"), 0, 0, 1, 0xFFFF0396);
				charMap.set(node.get("name"), editingSprite);

				editingSprite.sprite.shader = brightenShader;
				stageGroup.insert(editingSprite.index, editingSprite.sprite);
				editingSprite.sprite;
			case "ratings" | "combo":
				makeComboGroup(node);
				charMap["Combo Group"].sprite;
		}

		if (sprite != null) {
			if (Std.isOfType(sprite, FunkinSprite))
				sprite.initialZoom = FlxG.camera.zoom;
			for(prop in node.elementsNamed("property"))
				XMLUtil.applyXMLProperty(sprite, prop);
		}
	}

	editingSprite = null;
}